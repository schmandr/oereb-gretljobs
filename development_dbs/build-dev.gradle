import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")
    pathToUserFolder = System.getProperty("user.dir")

    /* Edit-DB */

    // iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
    // dbSchemaLandUsePlans = "arp_npl"
    // landUsePlansDataSets = ["2401", "2403", "2405", "2407", "2408", "2456", "2457", "2473", "2474", "2475", "2476", "2479",  "2491", "2498", "2501", "2502", "2514", "2551", "2573", "2580", "2613", "2614", "2615", "2616"]
    // //landUsePlansDataSets = ["2502"]
    // landUsePlansBaseUrl = "https://geo.so.ch/geodata/ch.so.arp.nutzungsplanung/"
    
    // iliModelGroundwaterProtection = "PlanerischerGewaesserschutz_LV95_V1_1"
    // dbSchemaGroundwaterProtection = "afu_gewaesserschutz"
    // groundwaterProtectionDataFile = "afu_gewaesserschutz.xtf"
    // groundwaterProtectionBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"

    iliModelKonfiguration = "OeREBKRMkvs_V2_0"
    dbSchemaKonfiguration = "agi_oereb_konfiguration"

    responsibleOfficesDataSet = "ch.so.agi.oereb_zustaendigestellen_V2_0"
    lawsDataSet = "ch.so.sk.oereb_gesetze_V2_0"
    themesDataSet = "ch.so.agi.oereb_themen_V2_0"
    logosDataSet = "ch.so.agi.oereb_logo_V2_0"
    textDataSet = "ch.so.agi.oereb_text_V2_0"
    availabilityDataSet = "ch.so.agi.oereb_verfuegbarkeit_V2_0"
    subunitOfLandRegisterDataSet = "ch.so.agi.oereb_grundbuchkreis_V2_0"

    konfigurationBaseUrl = "https://github.com/sogis-oereb/oereb-gretljobs/raw/main/development_dbs/"

    iliModelStaticForestPerimeters = "SO_AWJF_Statische_Waldgrenzen_20191119"
    dbSchemaStaticForestPerimeters = "awjf_statische_waldgrenze"
    staticForestPerimetersDataFile = "ch.so.awjf.statische_waldgrenze_edit.xtf"
    staticForestPerimetersBaseUrl = "https://github.com/sogis-oereb/oereb-gretljobs/raw/main/development_dbs/"
    
    // iliModelEinzelschutzDenkmal = "SO_ADA_Denkmal_20191128"
    // dbSchemaEinzelschutzDenkmal = "ada_denkmalschutz"
    // einzelschutzDenkmalDataFile = "ada_denkmalschutz.xtf"
    // einzelschutzDenkmalBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"

    // iliModelEinzelschutzGeotop = "SO_AFU_Geotope_20200312"
    // dbSchemaEinzelschutzGeotop = "afu_geotope"
    // einzelschutzGeotopDataFile = "afu_geotope.xtf"
    // einzelschutzGeotopBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"

    /* OEREB-DB */

    iliModelBasis = "OeREBKRM_V2_0"
    iliModelKonfiguration = "OeREBKRMkvs_V2_0"
    iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"

    responsibleOfficesBaseUrl = "https://github.com/sogis-oereb/oereb-gretljobs/raw/main/development_dbs/"
    responsibleOfficesDataSet = "ch.so.agi.oereb_zustaendigestellen_V2_0"

    // federalLegalBasisBaseUrl = "http://models.geo.admin.ch/V_D/OeREB/replaced/"
    // federalLegalBaseDataSet = "OeREBKRM_V1_1_Gesetze_20180501"

    // cantonalLegalBasisBaseUrl = "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/"
    // cantonalLegalBaseDataSet = "ch.so.sk.gesetze"

}    

/* Edit-DB */
// Basis: zustaendigeStelle <- Gesetze
// Konfiguration: (Gesetze) <- Themen
// Konfiguration: Logo
// Konfiguration: Text
// Konfiguration: Verfuegbarkeit
// Konfiguration: Grundbuchkreis

task downloadResponsibleOfficesEdit(type: Download) {
    doFirst {
        println konfigurationBaseUrl + responsibleOfficesDataSet + ".xtf"
    }
    description = "Download zuständige, kantonale Stellen."
    src responsibleOffickonfigurationBaseUrlesDataSet + responsibleOfficesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true
}

task replaceResponsibleOfficesToEdit(type: Ili2pgImport, dependsOn: "downloadResponsibleOfficesEdit") {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    dbschema = dbSchemaKonfiguration
    dataFile = file(Paths.get(pathToTempFolder.toString(), staticForestPerimetersDataFile))
    disableValidation = true
    dataset = responsibleOfficesDataSet
    importBid = true
}


// Cannot use GRETL for ili2pgImportSchema since not all v4 options are exposed. 
// task createSchemaLandUsePlans(type: SqlExecutor){
//     database = [dbUriEdit, "admin", "admin"]
//     sqlFiles = ['arp_npl.sql', 'arp_npl_grants.sql']
// }

// landUsePlansDataSets.each { landUsePlansDataSet ->
//     def dataSet = landUsePlansDataSet.toString()
//     task "downloadDataLandUsePlans_$dataSet"(type: Download) {
//         src landUsePlansBaseUrl + dataSet + ".xtf"
//         dest pathToTempFolder
//         overwrite true

//         doLast {
//             println "File downloaded to: " + pathToTempFolder
//         }        
//     }

//     task "replaceDataLandUsePlans_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadDataLandUsePlans_$dataSet") {
//         database = [dbUriEdit, dbUserEdit, dbPwdEdit]
//         models = iliModelLandUsePlans
//         dbschema = dbSchemaLandUsePlans
//         dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
//         dataset = dataSet
//         disableValidation = true
//     }
// }

// task replaceDataLandUsePlans() {
//     dependsOn {
//         tasks.findAll { task -> task.name.startsWith('replaceDataLandUsePlans_') }
//     }
// }

/*
task uploadToS3(type: AmazonS3FileUploadTask) {
    description = "Hochladen der exportierten Datei auf S3."
    file file("$rootDir/" + xtfFileName) 
    bucketName "ch.so.arp.nutzungsplanung.oereb"
    key xtfFileName

    def m = new ObjectMetadata()
    m.setCacheControl("no-cache, no-store")
    objectMetadata = m
}
*/

// task createSchemaGroundwaterProtection(type: SqlExecutor){
//     database = [dbUriEdit, "admin", "admin"]
//     sqlFiles = ['afu_gewaesserschutz.sql', 'afu_gewaesserschutz_grants.sql']
// }

// task downloadDataGroundwaterProtection(type: Download) {
//     src groundwaterProtectionBaseUrl + groundwaterProtectionDataFile
//     dest pathToTempFolder
//     overwrite true
//     doLast {
//         println "File downloaded to: " + pathToTempFolder
//     }        
// }

// task replaceDataGroundwaterProtection(type: Ili2pgImport, dependsOn: "downloadDataGroundwaterProtection") {
//     database = [dbUriEdit, dbUserEdit, dbPwdEdit]
//     models = iliModelGroundwaterProtection
//     dbschema = dbSchemaGroundwaterProtection
//     dataFile = file(Paths.get(pathToTempFolder.toString(), groundwaterProtectionDataFile))
//     deleteData = true
//     disableValidation = true
// }


/*
task createSchemaStaticForestPerimeters(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['awjf_statische_waldgrenze.sql', 'awjf_statische_waldgrenze_grants.sql']
}
*/
/*
task createSchemaStaticForestPerimeters(type: Ili2pgImportSchema) {
    database = [dbUriEdit, "admin", "admin"]
    models = iliModelStaticForestPerimeters
    dbschema = dbSchemaStaticForestPerimeters
    strokeArcs = true
    defaultSrsAuth = 2056
    createEnumTabs = true
    beautifyEnumDispName = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    nameByTopic = true
    postScript = file("awjf_statische_waldgrenze_grants.sql")
}
*/
task downloadDataStaticForestPerimetersEdit(type: Download) {
    src staticForestPerimetersBaseUrl + staticForestPerimetersDataFile
    dest pathToTempFolder
    overwrite true
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }
}

task replaceDataStaticForestPerimetersToEdit(type: Ili2pgImport, dependsOn: "downloadDataStaticForestPerimetersEdit") {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelStaticForestPerimeters
    dbschema = dbSchemaStaticForestPerimeters
    dataFile = file(Paths.get(pathToTempFolder.toString(), staticForestPerimetersDataFile))
    deleteData = true
    disableValidation = true
}

// task createSchemaEinzelschutzDenkmal(type: SqlExecutor){
//     database = [dbUriEdit, "admin", "admin"]
//     sqlFiles = ['ada_denkmalschutz.sql', 'ada_denkmalschutz_grants.sql']
// }

// task downloadDataEinzelschutzDenkmal(type: Download) {
//     src einzelschutzDenkmalBaseUrl + einzelschutzDenkmalDataFile
//     dest pathToTempFolder
//     overwrite true
//     doLast {
//         println "File downloaded to: " + pathToTempFolder
//     }
// }

// task replaceDataEinzelschutzDenkmal(type: Ili2pgImport, dependsOn: "downloadDataEinzelschutzDenkmal") {
//     database = [dbUriEdit, dbUserEdit, dbPwdEdit]
//     models = iliModelEinzelschutzDenkmal
//     dbschema = dbSchemaEinzelschutzDenkmal
//     dataFile = file(Paths.get(pathToTempFolder.toString(), einzelschutzDenkmalDataFile))
//     deleteData = true
//     disableValidation = true
// }


// task createSchemaEinzelschutzGeotop(type: SqlExecutor){
//     database = [dbUriEdit, "admin", "admin"]
//     sqlFiles = ['afu_geotope.sql', 'afu_geotope_grants.sql']
// }

// task downloadDataEinzelschutzGeotop(type: Download) {
//     src einzelschutzGeotopBaseUrl + einzelschutzGeotopDataFile
//     dest pathToTempFolder
//     overwrite true
//     doLast {
//         println "File downloaded to: " + pathToTempFolder
//     }
// }

// task replaceDataEinzelschutzGeotop(type: Ili2pgImport, dependsOn: "downloadDataEinzelschutzGeotop") {
//     database = [dbUriEdit, dbUserEdit, dbPwdEdit]
//     models = iliModelEinzelschutzGeotop
//     dbschema = dbSchemaEinzelschutzGeotop
//     dataFile = file(Paths.get(pathToTempFolder.toString(), einzelschutzGeotopDataFile))
//     deleteData = true
//     disableValidation = true
// }

/* OEREB-DB */
// Zum Testen der GRETL-Jobs werden nur die zuständigen Stellen benötigt.

def dbSchemas = ["stage", "live"]

task downloadResponsibleOfficesOereb(type: Download) {
    doFirst {
        println responsibleOfficesBaseUrl + responsibleOfficesDataSet + ".xtf"
    }
    description = "Download zuständige, kantonale Stellen."
    src responsibleOfficesBaseUrl + responsibleOfficesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true
}

dbSchemas.each { dbSchema ->
    def schema = dbSchema.toString()

    task "importResponsibleOfficesToOereb_$schema"(type: Ili2pgReplace, dependsOn: "downloadResponsibleOfficesOereb"){
        description = "Import zuständige, kantonale Stellen in das Schema $schema"
        database = [dbUriOereb, dbUserOereb, dbPwdOereb]
        dbschema = schema
        dataset = responsibleOfficesDataSet
        importBid = true
        models = iliModelBasis
        dataFile = file(Paths.get(pathToTempFolder.toString(), responsibleOfficesDataSet + ".xtf"))
        strokeArcs = true
    }
}

task importResponsibleOfficesToOereb() {
    description = "Import zuständige, kantonale Stellen in beide Schemas."
}

importResponsibleOfficesToOereb.dependsOn {
    tasks.findAll { task -> task.name.startsWith('importResponsibleOfficesToOereb_') }
}


// task downloadFederalLegalBasis(type: Download) {
//     description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
//     src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
//     dest pathToTempFolder
//     overwrite true      
// }

// task importFederalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
//     description = "Import Bundesgesetze ($federalLegalBaseDataSet) in das stage Schema."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     models = iliModelVorschriften
//     dbschema = "stage"
//     dataFile = file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml"))
//     dataset = "ch.admin.bk.gesetze" 
//     disableValidation = true
// }

// task downloadCantonalLegalBasis(type: Download) {
//     description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
//     src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
//     dest pathToTempFolder
//     overwrite true    
// }

// task importCantonalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalLegalBasis') {
//     description = "Import kantonale Gesetze ($cantonalLegalBaseDataSet) in das stage Schema."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     models = iliModelVorschriften
//     dbschema = "stage"
//     dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf"))
//     dataset = cantonalLegalBaseDataSet 
//     disableValidation = true
// }
