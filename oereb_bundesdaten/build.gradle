import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def pathToDataZip = Paths.get(pathToTempFolder, "data.zip")

def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"
def baseUrl = "https://data.geo.admin.ch/"

def oerebThemen = [
    "ch.astra.projektierungszonen-nationalstrassen_v2_0.oereb",
    "ch.astra.baulinien-nationalstrassen_v2_0.oereb",
    "ch.bav.projektierungszonen-eisenbahnanlagen_v2_0.oereb",
    "ch.bav.baulinien-eisenbahnanlagen_v2_0.oereb",
    "ch.bazl.projektierungszonen-flughafenanlagen_v2_0.oereb",
    "ch.bazl.baulinien-flughafenanlagen_v2_0.oereb",
    "ch.bazl.sicherheitszonenplan_v2_0.oereb",
    "ch.vbs.kataster-belasteter-standorte-militaer_v2_0.oereb",
    "ch.bazl.kataster-belasteter-standorte-zivilflugplaetze_v2_0.oereb",
    "ch.bav.kataster-belasteter-standorte-oev_v2_0.oereb",
    "ch.bfe.projektierungszonen-starkstromanlagen_v2_0.oereb",
    "ch.bfe.baulinien-starkstromanlagen_v2_0.oereb"
]

def dbSchemas = ["stage", "live"]

defaultTasks "importData"

oerebThemen.each { oerebThema ->
    def themaName = oerebThema.toString()

    task "download_$themaName"(type: Download){
        description = "Download Bundesdaten"
        src "https://data.geo.admin.ch/" + themaName + "/data.zip"
        dest pathToTempFolder
        overwrite true
    }

    task "unzipData_$themaName"(type: Copy, dependsOn: "download_$themaName"){
        description = "Unzip data.zip"
        from zipTree(pathToDataZip)
        into file(pathToUnzipFolder)
        include "**/*.xtf"
        rename { String fileName ->
            if (fileName.contains(themaName)) {
                return themaName + ".xtf"
            }
            return fileName
        }
    }

    dbSchemas.eachWithIndex { dbSchema, i ->
        def schema = dbSchema.toString()
        def taskIndex = i.toString()
    
        task "import_$themaName$schema"(type: Ili2pgReplace, dependsOn: "unzipData_$themaName"){
            description = "Import Bundesdaten in DB schema $schema"
            database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
            dbschema = schema
            dataset = themaName
            models = iliModelTransferstruktur
            dataFile = file(Paths.get(pathToUnzipFolder.toString(), themaName + ".xtf"))
            disableValidation = false
        }
    }
}

task importData() {
    description = "Aggregationstask fÃ¼r Import aller Bundesdaten."

    dependsOn {
        tasks.findAll { task -> task.name.startsWith('import_') }
    }    
}