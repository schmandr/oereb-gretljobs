apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")

def iliModelKonfiguration = "OeREBKRMkvs_V2_0"

def dbSchemaKonfiguration = "agi_oereb_konfiguration"

def xtfFileName = "ch.so.agi.oereb_grundbuchkreis_V2_0.xtf"
def zipFileName = "ch.so.agi.oereb_grundbuchkreis_V2_0_xtf.zip"
def dataSet = "grundbuchkreis"

def bucketSuffix = '-undefined'
if ( gretlEnvironment == 'production' ) {
    bucketSuffix = ''
} else if ( gretlEnvironment == 'integration' || gretlEnvironment == 'dev' ) {
    bucketSuffix = '-' + gretlEnvironment.substring(0, 3)
} else {
    bucketSuffix = '-' + gretlEnvironment
}
def s3AgiTargetBucket = "ch.so.agi.geodata$bucketSuffix"

task exportData(type: Ili2pgExport) {
    description = "Exportiert die Grundbuchkreise."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    dbschema = dbSchemaKonfiguration
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = dataSet
    disableValidation = true
    exportTid = true
}

task validateData(type: IliValidator, dependsOn: "exportData") {
    description = "Validiert die exportierten Daten."
    dataFiles = [
                    file(Paths.get("$rootDir", xtfFileName))
                ]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

task importDataToStage(type: Ili2pgReplace, dependsOn: "validateData") {
    description = "Import der Grundbuchkreise in das Stage-Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelKonfiguration
    dbschema = "stage"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = dataSet 
    importBid = true
    importTid = true
    disableValidation = true
}

task importDataToLive(type: Ili2pgReplace, dependsOn: "validateData") {
    description = "Import der Grundbuchkreise in das Live-Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelKonfiguration
    dbschema = "live"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = dataSet 
    importBid = true
    importTid = true
    disableValidation = true
}

task uploadXtfToS3Geodata(type: S3Upload) {
    description = "XTF-File nach S3 hochladen."
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    sourceFile = file(Paths.get("$rootDir", xtfFileName))
    endPoint = "https://s3.eu-central-1.amazonaws.com"
    region = "eu-central-1"
    bucketName = s3AgiTargetBucket
    acl = "public-read"
}