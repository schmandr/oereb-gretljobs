apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def pathToDataZip = Paths.get(pathToTempFolder, "data.zip")

def iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"

def kbsDataSet = "ch.so.afu.oereb_kataster_belasteter_standorte"
def wmsDataSet = "ch.so.afu.oerebwms_kataster_belasteter_standorte"

def xtfFileName = kbsDataSet + "_V2_0.xtf"
def xtfZipFileName = kbsDataSet + "_V2_0_xtf.zip"

def bucketSuffix = '-undefined'
if ( gretlEnvironment == 'production' ) {
    bucketSuffix = ''
} else if ( gretlEnvironment == 'integration' || gretlEnvironment == 'development' ) {
    bucketSuffix = '-' + gretlEnvironment.substring(0, 3)
} else {
    bucketSuffix = '-' + gretlEnvironment
}
def s3AgiTargetBucket = "ch.so.agi.geodata$bucketSuffix"

task downloadKbs(type: Download){
    description = "Download Belastete Standorte"
    src "https://s3.eu-central-1.amazonaws.com/ch.so.agi.oereb.tmp/altlast4web/data.zip" // http://altlast4web.verw.rootso.org/interlis_exports/oereb2/data.zip TODO: URL anpassen
    dest pathToTempFolder
    overwrite true
    acceptAnyCertificate true //eventuell später mit neuem Base-Image löschen, Stand 14.01.22 noch nicht möglich
}

task unzipData(type: Copy, dependsOn: "downloadKbs"){
    description = "Unzip Data.zip"
    from zipTree(pathToDataZip)
    into file("$rootDir")
    include "**/*.xtf"
    rename { String fileName ->
        if (fileName.contains("ch.so.kataster-belasteter-standorte.oereb")) {
            return xtfFileName
        }
        return fileName
    }
}

task validateData(type: IliValidator, dependsOn: "unzipData") {
    description = "Validiert die exportierten Daten in der Transferstruktur inkl. der externen Beziehungen."
    dataFiles = [
                 file(Paths.get("$rootDir", xtfFileName))
                ]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

task importDataToStage(type: Ili2pgReplace, dependsOn: "validateData") {
    description = "Import Belastete Standorte in das Stage-Schema."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "stage"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = kbsDataSet
    disableValidation = true
    importTid = true
    importBid = true
}

task refreshOerebWMSTablesStage(type: SqlExecutor) {
    description = "Aktualisiert OEREB WMS Tabellen."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_oerebwms_tables.sql"]
    sqlParameters = [dbSchema: 'stage']
}

task importDataToLive(type: Ili2pgReplace) {
    description = "Import Belastete Standorte in das Live-Schema."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    models = iliModelTransferstruktur
    dbschema = "live"
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = kbsDataSet
    disableValidation = true
    importTid = true
    importBid = true
}

task refreshOerebWMSTablesLive(type: SqlExecutor) {
    description = "Aktualisiert OEREB WMS Tabellen."
    database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
    sqlFiles = ["update_oerebwms_tables.sql"]
    sqlParameters = [dbSchema: 'live']
}

task zipXtfFile(type: Zip) {
    description = "Zipt das xtf-File mit den belasteten Standorten für den Upload nach S3"
    from "$rootDir"
    include xtfFileName
    archiveName xtfZipFileName
    destinationDir(file("$rootDir"))
}

task uploadXtfToS3Geodata(type: S3Upload, dependsOn: "zipXtfFile") {
    description = "Xtf-File nach S3 hochladen."
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    sourceFile = file(Paths.get("$rootDir", xtfZipFileName))
    endPoint = "https://s3.eu-central-1.amazonaws.com"
    region = "eu-central-1"
    bucketName = s3AgiTargetBucket
    acl = "public-read"
}
