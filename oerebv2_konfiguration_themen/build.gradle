apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")

def iliModelKonfiguration = "OeREBKRMkvs_V2_0"

def dbSchemaKonfiguration = "agi_oereb_konfiguration"

def xtfFileName = "ch.so.agi.oereb_themen_V2_0.xtf"
def zipFileName = "ch.so.agi.oereb_themen_V2_0_xtf.zip"
def dataSet = "themen"

def responsibleOfficesDataFile = "ch.so.agi.oereb_zustaendigestellen_V2_0.xtf"
def legalBasisDataFile = "ch.so.agi.oereb_gesetze_V2_0.xtf"

def federalLegalBasisDataFile = "OeREBKRM_V2_0_Gesetze_20210414.xml"
def federalThemesDataFile = "OeREBKRM_V2_0_Themen_20220125.xml"
def federalConfigurationBaseUrl = "https://models.geo.admin.ch/V_D/OeREB/"

def bucketSuffix = '-undefined'
if ( gretlEnvironment == 'production' ) {
    bucketSuffix = ''
} else if ( gretlEnvironment == 'integration' || gretlEnvironment == 'dev' ) {
    bucketSuffix = '-' + gretlEnvironment.substring(0, 3)
} else {
    bucketSuffix = '-' + gretlEnvironment
}

def cantonalConfigurationBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.geodata$bucketSuffix/"

def s3AgiTargetBucket = "ch.so.agi.geodata$bucketSuffix"

def dbSchemas = ["stage","live"]

defaultTasks "importData"

task exportData(type: Ili2pgExport) {
    description = "Exportiert die kantonalen Themen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    dbschema = dbSchemaKonfiguration
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = dataSet
    disableValidation = true
    exportTid = true
}

task downloadResponsibleOffices(type: Download) {
    doFirst {
        println cantonalConfigurationBaseUrl + responsibleOfficesDataFile
    }
    description = "Download zuständige, kantonale Stellen."
    src cantonalConfigurationBaseUrl + responsibleOfficesDataFile
    dest pathToTempFolder
    overwrite true
}

task downloadCantonalLegalBasis(type: Download) {
    doFirst {
        println cantonalConfigurationBaseUrl + legalBasisDataFile
    }
    description = "Download kantonale Gesetze."
    src cantonalConfigurationBaseUrl + legalBasisDataFile
    dest pathToTempFolder
    overwrite true
}

task downloadFederalLegalBasis(type: Download) {
    doFirst {
        println federalConfigurationBaseUrl + federalLegalBasisDataFile
    }
    description = "Download Bundesgesetze und -verordnungen."
    src federalConfigurationBaseUrl + federalLegalBasisDataFile
    dest pathToTempFolder
    overwrite true
}

task downloadFederalThemes(type: Download) {
    doFirst {
        println cantonalConfigurationBaseUrl + federalThemesDataFile
    }
    description = "Download Bundesthemen."
    src federalConfigurationBaseUrl + federalThemesDataFile
    dest pathToTempFolder
    overwrite true
}

task validateData(type: IliValidator, dependsOn: ["exportData", "downloadResponsibleOffices", "downloadCantonalLegalBasis", "downloadFederalLegalBasis", "downloadFederalThemes"]) {
    description = "Validiert die exportierten Daten."
    dataFiles = [
                    file(Paths.get(pathToTempFolder, responsibleOfficesDataFile)),
                    file(Paths.get(pathToTempFolder, legalBasisDataFile)),
                    file(Paths.get(pathToTempFolder, federalLegalBasisDataFile)),
                    file(Paths.get(pathToTempFolder, federalThemesDataFile)),
                    file(Paths.get("$rootDir", xtfFileName))
                ]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

dbSchemas.each { dbSchema ->
    def schema = dbSchema.toString()
    task "importDataTo_$schema"(type: Ili2pgUpdate, dependsOn: "validateData"){
        description = "Import der kantonalen Themen in das $schema Schema"
        database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
        dbschema = schema
        dataset = dataSet
        models = iliModelKonfiguration
        dataFile = file(Paths.get("$rootDir", xtfFileName))
        disableValidation = true
        importBid = true
        importTid = true
    }
}

task importData() {
    description = "Aggregationstask für Import der kantonalen Themen."

    dependsOn {
        tasks.findAll { task -> task.name.startsWith('importDataTo_') }
    }    

    finalizedBy "uploadXtfToS3Geodata"
}

task uploadXtfToS3Geodata(type: S3Upload) {
    description = "XTF-File nach S3 hochladen."
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    sourceFile = file(Paths.get("$rootDir", xtfFileName))
    endPoint = "https://s3.eu-central-1.amazonaws.com"
    region = "eu-central-1"
    bucketName = s3AgiTargetBucket
    acl = "public-read"
}