apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

def pathToTempFolder = System.getProperty("java.io.tmpdir")

def iliModelKonfiguration = "OeREBKRMkvs_V2_0"

def dbSchemaKonfiguration = "agi_konfiguration_oerebv2"

def xtfFileName = "ch.so.agi.oereb_verfuegbarkeit_V2_0.xtf"
def zipFileName = "ch.so.agi.oereb_verfuegbarkeit_V2_0_xtf.zip"
def dataSet = "verfuegbarkeit"

def bucketSuffix = '-undefined'
if ( gretlEnvironment == 'production' ) {
    bucketSuffix = ''
} else if ( gretlEnvironment == 'integration' || gretlEnvironment == 'dev' ) {
    bucketSuffix = '-' + gretlEnvironment.substring(0, 3)
} else {
    bucketSuffix = '-' + gretlEnvironment
}
def s3AgiTargetBucket = "ch.so.agi.geodata$bucketSuffix"

def dbSchemas = ["stage","live"]

defaultTasks "importData"

task updateAVImportDate(type: SqlExecutor) {
    description = "Update des AV-Import Datums per Gemeinde"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["update_avimportdate.sql"]
}

task exportData(type: Ili2pgExport, dependsOn: "updateAVImportDate") {
    description = "Exportiert die Verf端gbarkeit."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    dbschema = dbSchemaKonfiguration
    dataFile = file(Paths.get("$rootDir", xtfFileName))
    dataset = dataSet
    disableValidation = true
    exportTid = true
}

task validateData(type: IliValidator, dependsOn: "exportData") {
    description = "Validiert die exportierten Daten."
    dataFiles = [
                    file(Paths.get("$rootDir", xtfFileName))
                ]
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
}

dbSchemas.each { dbSchema ->
    def schema = dbSchema.toString()
    task "importDataTo_$schema"(type: Ili2pgUpdate, dependsOn: "validateData"){
        description = "Import der Verf端gbarkeit in das $schema Schema"
        database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
        dbschema = schema
        dataset = dataSet
        models = iliModelKonfiguration
        dataFile = file(Paths.get("$rootDir", xtfFileName))
        disableValidation = true
        importBid = true
        importTid = true
    }
}

task importData() {
    description = "Aggregationstask f端r Import der Verf端gbarkeit."

    dependsOn {
        tasks.findAll { task -> task.name.startsWith('importDataTo_') }
    }    

    finalizedBy "uploadXtfToS3Geodata"
}

task uploadXtfToS3Geodata(type: S3Upload) {
    description = "XTF-File nach S3 hochladen."
    accessKey = awsAccessKeyAgi
    secretKey = awsSecretAccessKeyAgi
    sourceFile = file(Paths.get("$rootDir", xtfFileName))
    endPoint = "https://s3.eu-central-1.amazonaws.com"
    region = "eu-central-1"
    bucketName = s3AgiTargetBucket
    acl = "public-read"
}